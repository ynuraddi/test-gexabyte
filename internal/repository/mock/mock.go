// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/manager.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "gexabyte/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCurrency is a mock of Currency interface.
type MockCurrency struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyMockRecorder
}

// MockCurrencyMockRecorder is the mock recorder for MockCurrency.
type MockCurrencyMockRecorder struct {
	mock *MockCurrency
}

// NewMockCurrency creates a new mock instance.
func NewMockCurrency(ctrl *gomock.Controller) *MockCurrency {
	mock := &MockCurrency{ctrl: ctrl}
	mock.recorder = &MockCurrencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrency) EXPECT() *MockCurrencyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCurrency) Create(ctx context.Context, symbol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCurrencyMockRecorder) Create(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurrency)(nil).Create), ctx, symbol)
}

// GetBySymbol mocks base method.
func (m *MockCurrency) GetBySymbol(ctx context.Context, symbol string) (model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySymbol", ctx, symbol)
	ret0, _ := ret[0].(model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySymbol indicates an expected call of GetBySymbol.
func (mr *MockCurrencyMockRecorder) GetBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySymbol", reflect.TypeOf((*MockCurrency)(nil).GetBySymbol), ctx, symbol)
}

// List mocks base method.
func (m *MockCurrency) List(ctx context.Context) ([]model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCurrencyMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCurrency)(nil).List), ctx)
}

// MockCurrencyPrice is a mock of CurrencyPrice interface.
type MockCurrencyPrice struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyPriceMockRecorder
}

// MockCurrencyPriceMockRecorder is the mock recorder for MockCurrencyPrice.
type MockCurrencyPriceMockRecorder struct {
	mock *MockCurrencyPrice
}

// NewMockCurrencyPrice creates a new mock instance.
func NewMockCurrencyPrice(ctrl *gomock.Controller) *MockCurrencyPrice {
	mock := &MockCurrencyPrice{ctrl: ctrl}
	mock.recorder = &MockCurrencyPriceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyPrice) EXPECT() *MockCurrencyPriceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCurrencyPrice) Create(ctx context.Context, rates ...model.CurrencyPrice) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range rates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCurrencyPriceMockRecorder) Create(ctx interface{}, rates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, rates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurrencyPrice)(nil).Create), varargs...)
}

// List mocks base method.
func (m *MockCurrencyPrice) List(ctx context.Context) ([]model.CurrencyPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.CurrencyPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCurrencyPriceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCurrencyPrice)(nil).List), ctx)
}
