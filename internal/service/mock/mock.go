// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/manager.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "gexabyte/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCurrency is a mock of Currency interface.
type MockCurrency struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyMockRecorder
}

// MockCurrencyMockRecorder is the mock recorder for MockCurrency.
type MockCurrencyMockRecorder struct {
	mock *MockCurrency
}

// NewMockCurrency creates a new mock instance.
func NewMockCurrency(ctrl *gomock.Controller) *MockCurrency {
	mock := &MockCurrency{ctrl: ctrl}
	mock.recorder = &MockCurrencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrency) EXPECT() *MockCurrencyMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCurrency) Create(ctx context.Context, symbol string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, symbol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCurrencyMockRecorder) Create(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCurrency)(nil).Create), ctx, symbol)
}

// CreatePrice mocks base method.
func (m *MockCurrency) CreatePrice(ctx context.Context, rates ...model.CurrencyPrice) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range rates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePrice", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePrice indicates an expected call of CreatePrice.
func (mr *MockCurrencyMockRecorder) CreatePrice(ctx interface{}, rates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, rates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrice", reflect.TypeOf((*MockCurrency)(nil).CreatePrice), varargs...)
}

// GetCurrentPrices mocks base method.
func (m *MockCurrency) GetCurrentPrices(ctx context.Context, symbols ...string) ([]model.GetCurrencyPriceDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range symbols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentPrices", varargs...)
	ret0, _ := ret[0].([]model.GetCurrencyPriceDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentPrices indicates an expected call of GetCurrentPrices.
func (mr *MockCurrencyMockRecorder) GetCurrentPrices(ctx interface{}, symbols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, symbols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPrices", reflect.TypeOf((*MockCurrency)(nil).GetCurrentPrices), varargs...)
}

// GetPriceHistorical mocks base method.
func (m *MockCurrency) GetPriceHistorical(ctx context.Context, req model.GetCurrencyPriceHistoricalDTOReq) (*model.GetCurrencyPriceHistoricalDTORes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceHistorical", ctx, req)
	ret0, _ := ret[0].(*model.GetCurrencyPriceHistoricalDTORes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceHistorical indicates an expected call of GetPriceHistorical.
func (mr *MockCurrencyMockRecorder) GetPriceHistorical(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceHistorical", reflect.TypeOf((*MockCurrency)(nil).GetPriceHistorical), ctx, req)
}

// GetStat24H mocks base method.
func (m *MockCurrency) GetStat24H(ctx context.Context, symbols ...string) ([]model.GetCurrencyStat24HDTO, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range symbols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStat24H", varargs...)
	ret0, _ := ret[0].([]model.GetCurrencyStat24HDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStat24H indicates an expected call of GetStat24H.
func (mr *MockCurrencyMockRecorder) GetStat24H(ctx interface{}, symbols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, symbols...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStat24H", reflect.TypeOf((*MockCurrency)(nil).GetStat24H), varargs...)
}

// List mocks base method.
func (m *MockCurrency) List(ctx context.Context) ([]model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCurrencyMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCurrency)(nil).List), ctx)
}

// ListPrices mocks base method.
func (m *MockCurrency) ListPrices(ctx context.Context) ([]model.CurrencyPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrices", ctx)
	ret0, _ := ret[0].([]model.CurrencyPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrices indicates an expected call of ListPrices.
func (mr *MockCurrencyMockRecorder) ListPrices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrices", reflect.TypeOf((*MockCurrency)(nil).ListPrices), ctx)
}
