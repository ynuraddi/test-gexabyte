// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/clients/binance/binance.go

// Package mock_binance is a generated GoMock package.
package mock_binance

import (
	context "context"
	reflect "reflect"

	binance_connector "github.com/binance/binance-connector-go"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// KlineService mocks base method.
func (m *MockClient) KlineService(ctx context.Context, symbol, interval string, startTime, endTime int64, limit int) ([]*binance_connector.KlinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KlineService", ctx, symbol, interval, startTime, endTime, limit)
	ret0, _ := ret[0].([]*binance_connector.KlinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KlineService indicates an expected call of KlineService.
func (mr *MockClientMockRecorder) KlineService(ctx, symbol, interval, startTime, endTime, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KlineService", reflect.TypeOf((*MockClient)(nil).KlineService), ctx, symbol, interval, startTime, endTime, limit)
}

// Ticker24hService mocks base method.
func (m *MockClient) Ticker24hService(ctx context.Context, symbol string) (*binance_connector.Ticker24hrResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticker24hService", ctx, symbol)
	ret0, _ := ret[0].(*binance_connector.Ticker24hrResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ticker24hService indicates an expected call of Ticker24hService.
func (mr *MockClientMockRecorder) Ticker24hService(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticker24hService", reflect.TypeOf((*MockClient)(nil).Ticker24hService), ctx, symbol)
}

// TickerService mocks base method.
func (m *MockClient) TickerService(ctx context.Context, symbol string) (*binance_connector.TickerPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TickerService", ctx, symbol)
	ret0, _ := ret[0].(*binance_connector.TickerPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TickerService indicates an expected call of TickerService.
func (mr *MockClientMockRecorder) TickerService(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TickerService", reflect.TypeOf((*MockClient)(nil).TickerService), ctx, symbol)
}
